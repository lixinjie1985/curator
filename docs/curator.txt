What is Curator?
apache curator是一个java客户端库用于apache zookeeper，包括高级的api框架和工具使对zookeeper的使用更加简单和可靠

Components
Framework
curator框架是一个高级别的api，极大的简化了对zookeeper的使用，添加了很多特性，处理复杂的到zookeeper集群的连接管理和重试操作，简化原始zookeeper的方法和事件，提供一个现代、流式api接口
使用CuratorFrameworkFactory类提供的工厂方法或builder方法来创建CuratorFramework类的实例，该实例是完全线程安全的，一个zookeeper集群只需共享一个这样的实例
使用工厂方法创建比较简单，使用builder方法创建可以控制对所有参数的设置。采用流式api，前面可以设置很多参数，最后以forPath方法结束
一个后台操作的完成或一个watch的触发，都通过ClientListener回调接口进行通知，通过addListener()方法注册回调接口
由于zookeeper不支持相对路径（命名空间），每次操作都必须指定全路径（从根目录开始），那么在创建客户端实例时可以指定一个命名空间namespace("MyApp")，以后的所有路径都基于该命名空间

Client
curator client是一个低级别的api。CuratorZookeeperClient类是一个对zookeeper java客户端的一个包装，是对zookeeper的访问更加简单和更少出错
包括持续连接管理，操作重试。对zookeeper集群的操作可能失败，实践表明应该重试，循环重试机制可以做到这点，所有的操作都应该包装在循环重试中
RetryLoop retryLoop = client.newRetryLoop();
while ( retryLoop.shouldContinue() )
{
   try
   {
       // perform your work
       ...
       // it's important to re\-get the ZK instance as there may have been an error and the instance was re\-created
       ZooKeeper      zk = client.getZookeeper();
       retryLoop.markComplete();
   }
   catch ( Exception e )
   {
       retryLoop.takeException(e);
   }
}
循环重试维护重试的次数和决定哪些异常可以重试哪些不用重试，重试策略会被调用来决定是否需要继续。也可以使用下面这种形式完成循环重试
RetryLoop.callWithRetry(client, new Callable<Void>()
{
      @Override
      public Void call() throws Exception
      {
          // do your work here - it will get retried if needed
          return null;
      }
});
重试策咯RetryPolicy接口控制重试行为，只有一个方法 allowRetry接受已经重试的次数和已经过去的时间两个参数，每次重试前会调用该方法，
允许重试则继续重试，否则抛出异常。有几种重试策略，RetryOneTime重试一次，RetryNTimes指定次数重试，RetryUntilElapsed指定时间重试，ExponentialBackoffRetry多次重试中间插入休眠 

Recipes
curator实现了所有zookeeper的菜谱（除了两阶段提交外）
Elections
Leader Latch，在分布式计算中，用于leader选举，通过选举算法选出一个leader节点，用于指挥和协调其它节点
Leader Election，初始的curator leader选举菜谱
Locks
Shared Reentrant Lock，完全的分布式锁用于全局同步，不可能有两个客户端同时获取锁
Shared Lock，与上面的锁相似，但不是重入的
Shared Reentrant Read Write Lock，可重入读写锁，可跨越多个JVM工作，读锁可以共享访问，写锁只能排它访问
Shared Semaphore，一个计数信号量，可跨越多个JVM工作，该信号量是公平的，多个进程按照请求的顺序获得租约
Multi Shared Lock，一个容器包含多个锁，但当作一个整体使用，当获取锁时必须获取全部的锁，如果不能则已获取的部分锁要释放掉，当释放锁时全部的锁都要释放
Barriers
Barrier，分布式系统使用屏障阻止多个节点来等待一个条件的满足，一旦条件满足，所有的节点被同时允许处理
Double Barrier，双屏障使多个节点在一个计算的开始和结束两个地方同步，当足够的节点加入屏障时，计算开始，一旦所有的节点都完成时，它们就离开屏障
Counters
Shared Counter，一个共享整数，多个客户端可以读取和修改，还可以注册监听器，整数被修改时得到通知
Distributed Atomic Long，一个计数器，可以原子的增加和减少，首先使用乐观锁，失败时再使用互斥锁，对于这两种锁都有一个重试策略
Caches
Node Cache，把一个节点的数据在本地缓存，并监视节点，可以注册一个监听器，当节点变化时得到通知
Path Cache，监视一个节点的孩子，当孩子变化时会更新孩子状态，可以注册一个监听器，当孩子变化时得到通知
Tree Cache，把一个路径的所有孩子都缓存到本地，并监视它们，可以注册一个监听器，当发送变化时得到通知
Nodes
Persistent Ephemeral Node，当连接或会话中断时，一个临时节点尝试停留在zookeeper中
Group Member，组成员关系管理，把一个实例添加到组内，并维护组内成员的一个缓存
Queues
Distributed Queue，分布式队列，加入到队列里面的项被保证有顺序，如果只有一个消费者消费的话将是FIFO的顺序，如果顺序重要的话，使用一个LeaderSelector选出唯一一个消费者
Distributed Id Queue，允许队列里的项都关联一个ID，如果需要的话队列里的项可以根据ID被移除
Distributed Priority Queue，分布式优先队列
Distributed Delay Queue，分布式延迟队列
Simple Distributed Queue，对上面的那个分布式队列的替换

